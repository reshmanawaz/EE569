{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue16;\red0\green0\blue0;\red148\green0\blue242;
\red8\green0\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c7451;\cssrgb\c0\c0\c0;\cssrgb\c65490\c3529\c96078;
\cssrgb\c5490\c0\c100000;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs20 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 % Reading the image\cf0 \strokec3 \
input_image = read_gray(\cf4 \strokec4 'board.raw'\cf0 \strokec3 , 768, 768);\
figure(1);\
imshow(input_image);\
title(\cf4 \strokec4 'Input Image: Board'\cf0 \strokec3 );\
\
\cf2 \strokec2 % Call the countHolesAndObjects function\cf0 \strokec3 \
countHolesAndObjects(\cf4 \strokec4 'board.raw'\cf0 \strokec3 );\
\
\pard\pardeftab720\partightenfactor0
\cf5 \strokec5 function \cf0 \strokec3 countHolesAndObjects(filename)\
    width = 768;\
    height = 768;\
\
    \cf2 \strokec2 % Reading the image\cf0 \strokec3 \
    input_image = read_gray(filename, width, height); \
    \
    \cf2 \strokec2 % Display the input image\cf0 \strokec3 \
    figure(2);\
    imshow(input_image);\
    title(\cf4 \strokec4 'Input Image: Board'\cf0 \strokec3 );\
\
    \cf2 \strokec2 % Binarize the image\cf0 \strokec3 \
    binary_image = binary(input_image);\
\
    \cf2 \strokec2 % Shrinking the image to infinity\cf0 \strokec3 \
    shrinked_image = bwmorph(binary_image, \cf4 \strokec4 'shrink'\cf0 \strokec3 , Inf);\
\
    \cf2 \strokec2 % Apply the filter to count the number of holes\cf0 \strokec3 \
    filter = [0 0 0; 0 1 0; 0 0 0];\
    countHoles = Filters(shrinked_image, filter);\
\
    \cf2 \strokec2 % Increment holes count by 1\cf0 \strokec3 \
    countHoles = countHoles + 1;\
\
    \cf2 \strokec2 % Display the number of holes\cf0 \strokec3 \
    disp([\cf4 \strokec4 'Total number of holes =  '\cf0 \strokec3 , num2str(countHoles)]);\
\
    \cf2 \strokec2 % Count the connected components in the binary image (excluding background)\cf0 \strokec3 \
    number_of_objects = count_objects(shrinked_image);\
\
    \cf2 \strokec2 % Increment total count by 1\cf0 \strokec3 \
    number_of_objects = number_of_objects + 1;\
\
    \cf2 \strokec2 % Display the number of objects\cf0 \strokec3 \
    disp([\cf4 \strokec4 'Total number of objects found '\cf0 \strokec3 , num2str(number_of_objects)]);\
\
    \cf2 \strokec2 % Count the total number of white rectangle objects\cf0 \strokec3 \
    total_white_rectangles = count_white_rectangles(binary_image);\
    disp([\cf4 \strokec4 'Total number of white rectangle objects: '\cf0 \strokec3 , num2str(total_white_rectangles)]);\
    \
    \cf2 \strokec2 % Count the total number of white circle objects\cf0 \strokec3 \
    total_white_circles = count_white_circles(binary_image);\
    disp([\cf4 \strokec4 'Total number of white circle objects: '\cf0 \strokec3 , num2str(total_white_circles)]);\
\cf5 \strokec5 end\cf0 \strokec3 \
\
\
\cf5 \strokec5 function \cf0 \strokec3 count = count_objects(input_image)\
    \cf2 \strokec2 % Label connected components in the binary image\cf0 \strokec3 \
    labeled_image = bwlabel(input_image);\
    \
    \cf2 \strokec2 % Count the number of unique labels (excluding background)\cf0 \strokec3 \
    count = max(labeled_image(:)) - 1; \cf2 \strokec2 % Subtract 1 for the background\cf0 \strokec3 \
\cf5 \strokec5 end\cf0 \strokec3 \
\
\cf5 \strokec5 function \cf0 \strokec3 total_white_rectangles = count_white_rectangles(input_image)\
    \cf2 \strokec2 % Label connected components in the binary image\cf0 \strokec3 \
    labeled_image = bwlabel(input_image);\
    \
    \cf2 \strokec2 % Measure properties of the labeled regions\cf0 \strokec3 \
    stats = regionprops(labeled_image, \cf4 \strokec4 'Area'\cf0 \strokec3 , \cf4 \strokec4 'BoundingBox'\cf0 \strokec3 );\
    \
    \cf2 \strokec2 % Initialize counter for rectangle objects\cf0 \strokec3 \
    total_white_rectangles = 0;\
    \
    \cf2 \strokec2 % Define a threshold for aspect ratio to identify rectangles\cf0 \strokec3 \
    aspect_ratio_threshold = 2;\
    \
    \cf2 \strokec2 % Iterate through each labeled region\cf0 \strokec3 \
    \cf5 \strokec5 for \cf0 \strokec3 i = 1:numel(stats)\
        \cf2 \strokec2 % Get the bounding box dimensions\cf0 \strokec3 \
        bbox_width = stats(i).BoundingBox(2);\
        bbox_height = stats(i).BoundingBox(4);\
        \
        \cf2 \strokec2 % Calculate aspect ratio\cf0 \strokec3 \
        aspect_ratio = bbox_width / bbox_height;\
        \
        \cf2 \strokec2 % Check if aspect ratio meets the threshold (indicating a rectangle)\cf0 \strokec3 \
        \cf5 \strokec5 if \cf0 \strokec3 aspect_ratio < aspect_ratio_threshold\
            \cf2 \strokec2 % Increment the count of white rectangle objects\cf0 \strokec3 \
            total_white_rectangles = total_white_rectangles + 1;\
        \cf5 \strokec5 end\cf0 \strokec3 \
    \cf5 \strokec5 end\cf0 \strokec3 \
\cf5 \strokec5 end\cf0 \strokec3 \
\
\cf5 \strokec5 function \cf0 \strokec3 total_white_circles = count_white_circles(input_image)\
    \cf2 \strokec2 % Label connected components in the binary image\cf0 \strokec3 \
    labeled_image = bwlabel(input_image);\
    \
    \cf2 \strokec2 % Measure properties of the labeled regions\cf0 \strokec3 \
    stats = regionprops(labeled_image, \cf4 \strokec4 'Area'\cf0 \strokec3 , \cf4 \strokec4 'EquivDiameter'\cf0 \strokec3 );\
    \
    \cf2 \strokec2 % Initialize counter for circle objects\cf0 \strokec3 \
    total_white_circles = 0;\
    \
    \cf2 \strokec2 % Define a threshold for circularity\cf0 \strokec3 \
    circularity_threshold = 0.6; \cf2 \strokec2 % Adjust as needed\cf0 \strokec3 \
    \
    \cf2 \strokec2 % Iterate through each labeled region\cf0 \strokec3 \
    \cf5 \strokec5 for \cf0 \strokec3 i = 1:numel(stats)\
        \cf2 \strokec2 % Calculate circularity (area / (pi * (radius^2)))\cf0 \strokec3 \
        circularity = (4 * pi * stats(i).Area) / (stats(i).EquivDiameter^2 * pi);\
        \
        \cf2 \strokec2 % Check if the circularity meets the threshold\cf0 \strokec3 \
        \cf5 \strokec5 if \cf0 \strokec3 circularity > circularity_threshold\
            \cf2 \strokec2 % Increment the count of white circle objects\cf0 \strokec3 \
            total_white_circles = total_white_circles + 1;\
        \cf5 \strokec5 end\cf0 \strokec3 \
    \cf5 \strokec5 end\cf0 \strokec3 \
\cf5 \strokec5 end\cf0 \strokec3 \
\
\cf5 \strokec5 function \cf0 \strokec3 image = read_gray(file_path, width, height)\
    \cf2 \strokec2 % Open the raw data file\cf0 \strokec3 \
    fid = fopen(file_path, \cf4 \strokec4 'rb'\cf0 \strokec3 );\
    \
    \cf2 \strokec2 % Check if the file opened successfully\cf0 \strokec3 \
    \cf5 \strokec5 if \cf0 \strokec3 fid == -1\
        error([\cf4 \strokec4 'Could not open file: '\cf0 \strokec3 , file_path]);\
    \cf5 \strokec5 end\cf0 \strokec3 \
    \
    \cf2 \strokec2 % Read the raw data\cf0 \strokec3 \
    raw_data = fread(fid, width * height, \cf4 \strokec4 'uint8'\cf0 \strokec3 );\
    \
    \cf2 \strokec2 % Close the file\cf0 \strokec3 \
    fclose(fid);\
    \
    \cf2 \strokec2 % Reshape the raw data into an image array\cf0 \strokec3 \
    image = reshape(raw_data, [width, height]);\
    \
    \cf2 \strokec2 % Convert to uint8\cf0 \strokec3 \
    image = uint8(image');\
\cf5 \strokec5 end\cf0 \strokec3 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 % Function to binarize the input image\cf0 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf5 \strokec5 function \cf0 \strokec3 binary_image = binary(input_image)\
    \cf2 \strokec2 % Thresholding: pixels above 128 become white (255), and others become black (0)\cf0 \strokec3 \
    binary_image = input_image > 128;\
\cf5 \strokec5 end\cf0 \strokec3 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 % Function to count occurrences of a filter pattern in the input image\cf0 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf5 \strokec5 function \cf0 \strokec3 count = Filters(input_image, filter)\
    \cf2 \strokec2 % Initialize count to 0\cf0 \strokec3 \
    count = 0;\
    \
    \cf2 \strokec2 % Get the dimensions of the input image\cf0 \strokec3 \
    [height, width] = size(input_image);\
    \
    \cf2 \strokec2 % Iterate over each pixel in the input image, excluding borders\cf0 \strokec3 \
    \cf5 \strokec5 for \cf0 \strokec3 row = 2:(height - 1)\
        \cf5 \strokec5 for \cf0 \strokec3 col = 2:(width - 1)\
            \cf2 \strokec2 % Extract the sub-matrix around the current pixel\cf0 \strokec3 \
            matrix = input_image((row-1):(row+1), (col-1):(col+1));\
            \
            \cf2 \strokec2 % Check if the sub-matrix matches the specified filter\cf0 \strokec3 \
            \cf5 \strokec5 if \cf0 \strokec3 isequal(matrix, filter)\
                \cf2 \strokec2 % Increment the count if the filter is matched\cf0 \strokec3 \
                count = count + 1;\
            \cf5 \strokec5 end\cf0 \strokec3 \
        \cf5 \strokec5 end\cf0 \strokec3 \
    \cf5 \strokec5 end\cf0 \strokec3 \
\cf5 \strokec5 end\cf0 \strokec3 \
\
}
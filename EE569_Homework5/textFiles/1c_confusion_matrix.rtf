{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red202\green202\blue202;
\red70\green137\blue204;\red212\green214\blue154;\red140\green211\blue254;\red167\green197\blue152;\red212\green212\blue212;
\red67\green192\blue160;\red113\green184\blue255;\red194\green126\blue101;\red89\green156\blue62;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c70980\c80784\c65882;\cssrgb\c86275\c86275\c86275;
\cssrgb\c30588\c78824\c69020;\cssrgb\c50980\c77647\c100000;\cssrgb\c80784\c56863\c47059;\cssrgb\c41569\c66275\c30980;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  torch\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  numpy \cf2 \strokec2 as\cf4 \strokec4  np\cb1 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  collections \cf2 \strokec2 import\cf4 \strokec4  Counter\cb1 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  sklearn.metrics \cf2 \strokec2 import\cf4 \strokec4  confusion_matrix\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  seaborn \cf2 \strokec2 as\cf4 \strokec4  sns\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  matplotlib.pyplot \cf2 \strokec2 as\cf4 \strokec4  plt\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  itertools\cb1 \
\
\cf2 \cb3 \strokec2 import\cf4 \strokec4  torchvision \cf2 \strokec2 as\cf4 \strokec4  tv\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  torchvision.transforms \cf2 \strokec2 as\cf4 \strokec4  transforms\cb1 \
\
\cf2 \cb3 \strokec2 import\cf4 \strokec4  torch\cb1 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  collections \cf2 \strokec2 import\cf4 \strokec4  Counter\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 def\cf4 \strokec4  \cf6 \strokec6 noise\cf4 \strokec4 (\cf7 \strokec7 labels\cf4 \strokec4 , \cf7 \strokec7 noise_rate\cf4 \strokec4 =\cf8 \strokec8 0.5\cf4 \strokec4 )\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     counts = Counter\cf9 \strokec9 (\cf4 \strokec4 labels.tolist\cf9 \strokec9 ())\cf4 \cb1 \strokec4 \
\
\cb3     rates = \cf9 \strokec9 [\cf10 \strokec10 int\cf9 \strokec9 (\cf4 \strokec4 noise_rate * counts\cf9 \strokec9 [\cf4 \strokec4 i\cf9 \strokec9 ])\cf4 \strokec4  \cf2 \strokec2 for\cf4 \strokec4  i \cf11 \strokec11 in\cf4 \strokec4  \cf6 \strokec6 range\cf9 \strokec9 (\cf8 \strokec8 10\cf9 \strokec9 )]\cf4 \cb1 \strokec4 \
\
\cb3     noisy = \cf9 \strokec9 [\cf4 \strokec4 i.item\cf9 \strokec9 ()\cf4 \strokec4  \cf2 \strokec2 for\cf4 \strokec4  i \cf11 \strokec11 in\cf4 \strokec4  labels\cf9 \strokec9 ]\cf4 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 for\cf4 \strokec4  idx \cf11 \strokec11 in\cf4 \strokec4  \cf6 \strokec6 range\cf9 \strokec9 (\cf6 \strokec6 len\cf9 \strokec9 (\cf4 \strokec4 labels\cf9 \strokec9 )):\cf4 \cb1 \strokec4 \
\cb3         current = labels\cf9 \strokec9 [\cf4 \strokec4 idx\cf9 \strokec9 ]\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  rates\cf9 \strokec9 [\cf4 \strokec4 current\cf9 \strokec9 ]\cf4 \strokec4  > \cf8 \strokec8 0\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\cb3             rates\cf9 \strokec9 [\cf4 \strokec4 current\cf9 \strokec9 ]\cf4 \strokec4  -= \cf8 \strokec8 1\cf4 \cb1 \strokec4 \
\cb3             random = torch.randint\cf9 \strokec9 (\cf8 \strokec8 0\cf9 \strokec9 ,\cf4 \strokec4  \cf8 \strokec8 10\cf9 \strokec9 ,\cf4 \strokec4  \cf9 \strokec9 (\cf8 \strokec8 1\cf9 \strokec9 ,))\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 while\cf4 \strokec4  random == labels\cf9 \strokec9 [\cf4 \strokec4 idx\cf9 \strokec9 ]:\cf4 \cb1 \strokec4 \
\cb3                 random = torch.randint\cf9 \strokec9 (\cf8 \strokec8 0\cf9 \strokec9 ,\cf4 \strokec4  \cf8 \strokec8 10\cf9 \strokec9 ,\cf4 \strokec4  \cf9 \strokec9 (\cf8 \strokec8 1\cf9 \strokec9 ,))\cf4 \cb1 \strokec4 \
\cb3             noisy\cf9 \strokec9 [\cf4 \strokec4 idx\cf9 \strokec9 ]\cf4 \strokec4  = random.item\cf9 \strokec9 ()\cf4 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 return\cf4 \strokec4  noisy\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 def\cf4 \strokec4  \cf6 \strokec6 plot_confusion_matrix\cf4 \strokec4 (\cf7 \strokec7 cm\cf4 \strokec4 , \cf7 \strokec7 classes\cf4 \strokec4 , \cf7 \strokec7 normalize\cf4 \strokec4 =\cf5 \strokec5 True\cf4 \strokec4 , \cf7 \strokec7 title\cf4 \strokec4 =\cf12 \strokec12 'Normalized confusion matrix'\cf4 \strokec4 , \cf7 \strokec7 cmap\cf4 \strokec4 =\cf12 \strokec12 "Blues"\cf4 \strokec4 )\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 if\cf4 \strokec4  normalize\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\cb3         cm = cm.astype\cf9 \strokec9 (\cf12 \strokec12 'float'\cf9 \strokec9 )\cf4 \strokec4  / cm.\cf6 \strokec6 sum\cf9 \strokec9 (\cf4 \strokec4 axis=\cf8 \strokec8 1\cf9 \strokec9 )[:,\cf4 \strokec4  np.newaxis\cf9 \strokec9 ]\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 print\cf9 \strokec9 (\cf12 \strokec12 "Normalized confusion matrix"\cf9 \strokec9 )\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 print\cf9 \strokec9 (\cf12 \strokec12 'Confusion matrix, without normalization'\cf9 \strokec9 )\cf4 \cb1 \strokec4 \
\
\cb3     sns.heatmap\cf9 \strokec9 (\cf4 \strokec4 cm\cf9 \strokec9 ,\cf4 \strokec4  annot=\cf5 \strokec5 True\cf9 \strokec9 ,\cf4 \strokec4  fmt=\cf12 \strokec12 ".3g"\cf9 \strokec9 ,\cf4 \strokec4  cmap=cmap\cf9 \strokec9 ,\cf4 \strokec4  xticklabels=classes\cf9 \strokec9 ,\cf4 \strokec4  yticklabels=classes\cf9 \strokec9 )\cf4 \cb1 \strokec4 \
\cb3     plt.title\cf9 \strokec9 (\cf4 \strokec4 title\cf9 \strokec9 )\cf4 \cb1 \strokec4 \
\cb3     plt.ylabel\cf9 \strokec9 (\cf12 \strokec12 'True label'\cf9 \strokec9 )\cf4 \cb1 \strokec4 \
\cb3     plt.xlabel\cf9 \strokec9 (\cf12 \strokec12 'Predicted label'\cf9 \strokec9 )\cf4 \cb1 \strokec4 \
\cb3     plt.tight_layout\cf9 \strokec9 ()\cf4 \cb1 \strokec4 \
\cb3     plt.show\cf9 \strokec9 ()\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 __name__\cf4 \strokec4  == \cf12 \strokec12 '__main__'\cf9 \strokec9 :\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     transform = transforms.Compose\cf9 \strokec9 ([\cf4 \cb1 \strokec4 \
\cb3         transforms.ToTensor\cf9 \strokec9 (),\cf4 \cb1 \strokec4 \
\cb3         transforms.Normalize\cf9 \strokec9 ((\cf8 \strokec8 0.5\cf9 \strokec9 ,),\cf4 \strokec4  \cf9 \strokec9 (\cf8 \strokec8 0.5\cf9 \strokec9 ,))\cf4 \strokec4   \cb1 \
\cb3     \cf9 \strokec9 ])\cf4 \cb1 \strokec4 \
\cb3     train_set = tv.datasets.FashionMNIST\cf9 \strokec9 (\cf4 \cb1 \strokec4 \
\cb3         root=\cf12 \strokec12 './data'\cf9 \strokec9 ,\cf4 \cb1 \strokec4 \
\cb3         train=\cf5 \strokec5 True\cf9 \strokec9 ,\cf4 \cb1 \strokec4 \
\cb3         download=\cf5 \strokec5 True\cf9 \strokec9 ,\cf4 \cb1 \strokec4 \
\cb3         transform=transform\cb1 \
\cb3     \cf9 \strokec9 )\cf4 \cb1 \strokec4 \
\
\cb3     epsilon = \cf8 \strokec8 0.5\cf4 \strokec4   \cb1 \
\cb3     noisy_labels = noise\cf9 \strokec9 (\cf4 \strokec4 torch.tensor\cf9 \strokec9 (\cf4 \strokec4 train_set.targets\cf9 \strokec9 ),\cf4 \strokec4  epsilon\cf9 \strokec9 )\cf4 \strokec4   \cf13 \strokec13 # Assign noise to labels\cf4 \cb1 \strokec4 \
\
\cb3     \cf13 \strokec13 # Calculate the confusion matrix using the noisy labels\cf4 \cb1 \strokec4 \
\cb3     cm = confusion_matrix\cf9 \strokec9 (\cf4 \strokec4 train_set.targets\cf9 \strokec9 ,\cf4 \strokec4  noisy_labels\cf9 \strokec9 ,\cf4 \strokec4  normalize=\cf12 \strokec12 'true'\cf9 \strokec9 )\cf4 \strokec4   \cb1 \
\
\cb3     plt.figure\cf9 \strokec9 (\cf4 \strokec4 figsize=\cf9 \strokec9 (\cf8 \strokec8 10\cf9 \strokec9 ,\cf4 \strokec4  \cf8 \strokec8 8\cf9 \strokec9 ))\cf4 \cb1 \strokec4 \
\cb3     plot_confusion_matrix\cf9 \strokec9 (\cf4 \strokec4 cm\cf9 \strokec9 ,\cf4 \strokec4  classes=\cf9 \strokec9 [\cf10 \strokec10 str\cf9 \strokec9 (\cf4 \strokec4 i\cf9 \strokec9 )\cf4 \strokec4  \cf2 \strokec2 for\cf4 \strokec4  i \cf11 \strokec11 in\cf4 \strokec4  \cf6 \strokec6 range\cf9 \strokec9 (\cf8 \strokec8 10\cf9 \strokec9 )])\cf4 \cb1 \strokec4 \
\
}